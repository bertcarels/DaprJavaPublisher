/*
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 */

// build.gradle


//artifactoryPublish.skip=false


dependencies {
   

    // This dependency is used by the application.
    // implementation libs.guava

    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.2.4' // specify the version
    implementation 'org.springframework.boot:spring-boot-starter-web:3.2.4' // specify the version
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.2.4' // specify the version

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

    implementation 'com.h2database:h2:2.1.214' // specify the version
    implementation 'org.liquibase:liquibase-core:4.27.0'
    implementation 'io.dapr:dapr-sdk:1.11.0'

    implementation 'com.microsoft.sqlserver:mssql-jdbc:12.4.0.jre11'

    implementation 'com.azure:azure-identity:1.9.0'
    implementation 'com.microsoft.azure:msal4j:1.13.8'
    implementation 'com.azure:azure-core-http-netty:1.13.11'

    runtimeOnly 'org.springframework.boot:spring-boot-devtools:3.2.4'
    
    runtimeOnly 'com.microsoft.azure:applicationinsights-agent:3.5.2' 

     // Use JUnit test framework.
   // testImplementation libs.junit
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.2.4' // specify the version
    testImplementation 'com.h2database:h2'

    // Explicitly add the JUnit dependency
   // testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    //testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
}


application {
   mainClass = 'com.kaboutersoft.group.gtsciais.demo.DemoApplication'
}

configurations.runtimeOnly.setCanBeResolved(true)


test {
    useJUnitPlatform()
}

task copyApplicationInsightsDependency(type: Copy) {
    from configurations.runtimeOnly.filter { it.name.contains('insights')}
    into "${buildDir}/runtimeDependencies"
}

jar {
   
    from sourceSets.main.output
    exclude { fileTree("${buildDir}/runtimeDependencies")}
}

jar.dependsOn(copyApplicationInsightsDependency)



bootJar {
    archiveVersion.set('')
    archiveClassifier.set('')
}

build.dependsOn bootJar



task printVersion {
    doLast {
        println "Current project version: $version"
      
    }
}